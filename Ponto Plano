<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Exercício interativo de coordenadas cartesianas para aulas de matemática">
    <meta name="keywords" content="matemática, coordenadas cartesianas, plano cartesiano, exercício interativo">
    <title>Exercício de Coordenadas Cartesianas | Matemática Interativa</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f0f8ff;
            color: #333;
            line-height: 1.6;
        }
        .container {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            padding: 25px;
            margin-bottom: 20px;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 10px;
        }
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 25px;
        }
        .canvas-container {
            width: 100%;
            overflow-x: auto;
            margin-bottom: 25px;
            text-align: center;
        }
        #coordCanvas {
            display: block;
            margin: 0 auto;
            background-color: white;
            border: 1px solid #ddd;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .exercise {
            background-color: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
            border-left: 5px solid #3498db;
            margin-bottom: 20px;
        }
        .input-area {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin: 20px 0;
        }
        .coordinate-input {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
        }
        input {
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            width: 80px;
            text-align: center;
            font-size: 18px;
        }
        input:focus {
            border-color: #3498db;
            outline: none;
        }
        button {
            padding: 12px 25px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .result {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
            display: none;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .instructions {
            background-color: #e3f2fd;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
        }
        .hosting-info {
            background-color: #fff3cd;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            font-size: 14px;
            border-left: 5px solid #ffc107;
        }
        footer {
            text-align: center;
            margin-top: 30px;
            color: #6c757d;
            font-size: 14px;
        }
        @media print {
            body {
                background-color: white;
                padding: 0;
            }
            .container {
                box-shadow: none;
                padding: 0;
            }
            .exercise, .instructions, .hosting-info, footer {
                display: none;
            }
            #coordCanvas {
                box-shadow: none;
                border: 1px solid #000;
            }
        }
        @media (max-width: 600px) {
            input {
                width: 60px;
            }
            button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Plano Cartesiano - Identifique as Coordenadas</h1>
        <p class="subtitle">Observe o ponto marcado no plano cartesiano e digite suas coordenadas</p>
        
        <div class="instructions">
            <p><strong>Instruções:</strong> Observe o ponto marcado em vermelho no gráfico abaixo. 
            Digite as coordenadas (x, y) do ponto nos campos indicados e clique em "Verificar Resposta".</p>
        </div>
        
        <div class="canvas-container">
            <canvas id="coordCanvas" width="600" height="600"></canvas>
        </div>
        
        <div class="exercise">
            <h2>Qual é a coordenada do ponto marcado?</h2>
            
            <div class="input-area">
                <div class="coordinate-input">
                    <span>Ponto P = (</span>
                    <input type="number" id="xInput" placeholder="x">
                    <span>,</span>
                    <input type="number" id="yInput" placeholder="y">
                    <span>)</span>
                </div>
                
                <button id="checkBtn">Verificar Resposta</button>
                <button id="newPointBtn">Novo Ponto</button>
            </div>
            
            <div id="result" class="result"></div>
        </div>

        <div class="hosting-info">
            <h3>Como hospedar esta página gratuitamente?</h3>
            <p>Você pode hospedar esta página usando serviços gratuitos como GitHub Pages, Netlify ou Vercel. Basta fazer upload do arquivo HTML e ele estará disponível online para seus alunos!</p>
        </div>
    </div>

    <footer>
        <p>Exercício interativo de coordenadas cartesianas - Para uso educacional</p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const canvas = document.getElementById('coordCanvas');
            const ctx = canvas.getContext('2d');
            const checkBtn = document.getElementById('checkBtn');
            const newPointBtn = document.getElementById('newPointBtn');
            const xInput = document.getElementById('xInput');
            const yInput = document.getElementById('yInput');
            const resultDiv = document.getElementById('result');
            
            // Configurações
            const padding = 60;
            const axisColor = '#2c3e50';
            const gridColor = '#e0e0e0';
            const pointColor = '#e74c3c';
            
            let currentPoint = {};
            
            // Desenhar o plano cartesiano
            function drawCoordinateSystem() {
                const width = canvas.width;
                const height = canvas.height;
                const centerX = width / 2;
                const centerY = height / 2;
                const scale = 30; // pixels por unidade
                
                // Limpar canvas
                ctx.clearRect(0, 0, width, height);
                
                // Desenhar grade
                ctx.strokeStyle = gridColor;
                ctx.lineWidth = 1;
                
                // Linhas verticais
                for (let x = centerX; x < width; x += scale) {
                    ctx.beginPath();
                    ctx.moveTo(x, padding);
                    ctx.lineTo(x, height - padding);
                    ctx.stroke();
                }
                for (let x = centerX; x > 0; x -= scale) {
                    ctx.beginPath();
                    ctx.moveTo(x, padding);
                    ctx.lineTo(x, height - padding);
                    ctx.stroke();
                }
                
                // Linhas horizontais
                for (let y = centerY; y < height; y += scale) {
                    ctx.beginPath();
                    ctx.moveTo(padding, y);
                    ctx.lineTo(width - padding, y);
                    ctx.stroke();
                }
                for (let y = centerY; y > 0; y -= scale) {
                    ctx.beginPath();
                    ctx.moveTo(padding, y);
                    ctx.lineTo(width - padding, y);
                    ctx.stroke();
                }
                
                // Desenhar eixos
                ctx.strokeStyle = axisColor;
                ctx.lineWidth = 2;
                
                // Eixo X
                ctx.beginPath();
                ctx.moveTo(padding, centerY);
                ctx.lineTo(width - padding, centerY);
                ctx.stroke();
                
                // Eixo Y
                ctx.beginPath();
                ctx.moveTo(centerX, padding);
                ctx.lineTo(centerX, height - padding);
                ctx.stroke();
                
                // Flechas nos eixos
                ctx.beginPath();
                ctx.moveTo(width - padding, centerY);
                ctx.lineTo(width - padding - 10, centerY - 5);
                ctx.lineTo(width - padding - 10, centerY + 5);
                ctx.closePath();
                ctx.fillStyle = axisColor;
                ctx.fill();
                
                ctx.beginPath();
                ctx.moveTo(centerX, padding);
                ctx.lineTo(centerX - 5, padding + 10);
                ctx.lineTo(centerX + 5, padding + 10);
                ctx.closePath();
                ctx.fill();
                
                // Graduações e rótulos
                ctx.fillStyle = axisColor;
                ctx.font = '12px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                
                // Graduações eixo X positiva
                for (let i = 1; i <= 8; i++) {
                    const x = centerX + i * scale;
                    ctx.beginPath();
                    ctx.moveTo(x, centerY - 5);
                    ctx.lineTo(x, centerY + 5);
                    ctx.stroke();
                    ctx.fillText(i, x, centerY + 20);
                }
                
                // Graduações eixo X negativa
                for (let i = 1; i <= 8; i++) {
                    const x = centerX - i * scale;
                    ctx.beginPath();
                    ctx.moveTo(x, centerY - 5);
                    ctx.lineTo(x, centerY + 5);
                    ctx.stroke();
                    ctx.fillText(-i, x, centerY + 20);
                }
                
                // Graduações eixo Y positiva
                for (let i = 1; i <= 8; i++) {
                    const y = centerY - i * scale;
                    ctx.beginPath();
                    ctx.moveTo(centerX - 5, y);
                    ctx.lineTo(centerX + 5, y);
                    ctx.stroke();
                    ctx.fillText(i, centerX - 20, y);
                }
                
                // Graduações eixo Y negativa
                for (let i = 1; i <= 8; i++) {
                    const y = centerY + i * scale;
                    ctx.beginPath();
                    ctx.moveTo(centerX - 5, y);
                    ctx.lineTo(centerX + 5, y);
                    ctx.stroke();
                    ctx.fillText(-i, centerX - 20, y);
                }
                
                // Rótulos dos eixos
                ctx.font = '16px Arial';
                ctx.fillText('x', width - padding - 15, centerY - 15);
                ctx.fillText('y', centerX + 15, padding + 15);
                ctx.fillText('O', centerX - 12, centerY + 15);
                
                return { centerX, centerY, scale };
            }
            
            // Gerar um ponto aleatório
            function generatePoint() {
                // Garantir que o ponto esteja em um dos quadrantes (não sobre os eixos)
                const quadrant = Math.floor(Math.random() * 4) + 1;
                let x, y;
                
                switch(quadrant) {
                    case 1: // Primeiro quadrante (x positivo, y positivo)
                        x = Math.floor(Math.random() * 7) + 1;
                        y = Math.floor(Math.random() * 7) + 1;
                        break;
                    case 2: // Segundo quadrante (x negativo, y positivo)
                        x = Math.floor(Math.random() * 7) - 7;
                        y = Math.floor(Math.random() * 7) + 1;
                        break;
                    case 3: // Terceiro quadrante (x negativo, y negativo)
                        x = Math.floor(Math.random() * 7) - 7;
                        y = Math.floor(Math.random() * 7) - 7;
                        break;
                    case 4: // Quarto quadrante (x positivo, y negativo)
                        x = Math.floor(Math.random() * 7) + 1;
                        y = Math.floor(Math.random() * 7) - 7;
                        break;
                }
                
                currentPoint = { x, y };
                return currentPoint;
            }
            
            // Desenhar ponto no plano
            function drawPoint(centerX, centerY, scale) {
                const canvasX = centerX + currentPoint.x * scale;
                const canvasY = centerY - currentPoint.y * scale;
                
                // Desenhar ponto
                ctx.beginPath();
                ctx.arc(canvasX, canvasY, 8, 0, Math.PI * 2);
                ctx.fillStyle = pointColor;
                ctx.fill();
                
                // Desenhar contorno do ponto
                ctx.beginPath();
                ctx.arc(canvasX, canvasY, 8, 0, Math.PI * 2);
                ctx.strokeStyle = '#c0392b';
                ctx.lineWidth = 2;
                ctx.stroke();
            }
            
            // Verificar resposta do usuário
            function checkAnswer() {
                const userX = parseInt(xInput.value);
                const userY = parseInt(yInput.value);
                
                if (isNaN(userX) || isNaN(userY)) {
                    resultDiv.textContent = "Por favor, digite ambos os valores de coordenadas.";
                    resultDiv.className = "result error";
                    resultDiv.style.display = "block";
                    return;
                }
                
                if (userX === currentPoint.x && userY === currentPoint.y) {
                    resultDiv.textContent = "Parabéns! Você acertou as coordenadas!";
                    resultDiv.className = "result success";
                } else {
                    resultDiv.textContent = `Resposta incorreta. Tente novamente! (Dica: o ponto está no quadrante ${getQuadrantName(currentPoint.x, currentPoint.y)})`;
                    resultDiv.className = "result error";
                }
                
                resultDiv.style.display = "block";
            }
            
            // Obter nome do quadrante
            function getQuadrantName(x, y) {
                if (x > 0 && y > 0) return 'I (primeiro)';
                if (x < 0 && y > 0) return 'II (segundo)';
                if (x < 0 && y < 0) return 'III (terceiro)';
                if (x > 0 && y < 0) return 'IV (quarto)';
                return 'sobre um eixo';
            }
            
            // Limpar campos e gerar novo ponto
            function newPoint() {
                xInput.value = "";
                yInput.value = "";
                resultDiv.style.display = "none";
                generatePoint();
                render();
            }
            
            // Renderizar tudo
            function render() {
                const coords = drawCoordinateSystem();
                drawPoint(coords.centerX, coords.centerY, coords.scale);
            }
            
            // Inicializar
            generatePoint();
            render();
            
            // Event listeners
            checkBtn.addEventListener('click', checkAnswer);
            newPointBtn.addEventListener('click', newPoint);
            
            // Permitir submeter com Enter
            xInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') checkAnswer();
            });
            
            yInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') checkAnswer();
            });
        });
    </script>
</body>
</html>
